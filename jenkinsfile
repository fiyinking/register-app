
pipeline{
   agent {label 'Jenkins-Agent'}
     
     tools{
         jdk 'Java17'
         maven 'Maven3'
     }
 environment {
	    APP_NAME = "register-app-pipeline"
            RELEASE = "1.0.0"
            DOCKER_USER = "fiyinking"
            DOCKER_PASS = 'dockerhub'
            IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
            IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
	   
    }

   stages {
         stage("Clean Workspace"){
             steps{
                 cleanWs()
             }
         }
      stage('Checkout from scm'){
             steps{
                 git branch: 'main', url: 'https://github.com/fiyinking/register-app.git'
             }
         }
     stage('Build Application'){
       steps {
         sh "mvn clean package"
       }
     }
     
     stage('Test Application'){
       steps {
         sh "mvn test"
       }
     }
stage("SonarQube Analysis"){
           steps {
	           script {
		        withSonarQubeEnv(credentialsId: 'jenkins-sonarQube-token') { 
                        sh "mvn sonar:sonar"
                        }
	           }	
           }
       }

 stage("Build & Push Docker Image") {
            steps {
                script {
                    docker.withRegistry('',DOCKER_PASS) {
                        docker_image = docker.build "${IMAGE_NAME}"
                 }
                docker.withRegistry('',DOCKER_PASS) {
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                    }
              }
        }
     }
  stage("Trivy Scan") {
           steps {
               script {
	            sh ('docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image fiyinking/register-app-pipeline:latest --no-progress --scanners vuln  --exit-code 0 --severity HIGH,CRITICAL --format table')
               }
           }
       }
   stage("Trigger CD Pipeline") {
            steps {
                script {
                    sh "curl -v -k --user clouduser:${JENKINS_API_TOKEN} -X POST -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded' --data 'IMAGE_TAG=${IMAGE_TAG}' 'ec2-54-81-47-193.compute-1.amazonaws.com:8080/job/gitops-register-repo-cd/buildWithParameters?token=gitops-token'"
                }
            }

   }
}
       



       
